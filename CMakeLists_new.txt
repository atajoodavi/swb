# CMake project for swb

# This script expects that the following configuration variables are
# set and passed during CMake invocation:

# CMAKE_BINARY_DIR
# CMAKE_BUILD_TYPE       | possible values: "debug", "release", "profile"
# CMAKE_INSTALL_PREFIX   | ex: "D:/DOS"
# Fortran_FLAGS_DEBUG
# Fortran_FLAGS_RELEASE
# Fortran_FLAGS_PROFILE 
# PATH_TO_R
# OS                     | possible values: "win_x86", "win_x64", "max_osx", "linux"
# Fortran_COMPILER_NAME  | ex: "gfortran", "ifort"
# COMPILER_TRIPLET       | ex: "x86_64-w64-mingw32", "x86_64-apple-darwin12.4.0"
# COMPILER_VERSION       | ex: "4.8.0"


message("Processing top-level CMakelists.txt for project swb")

#------------------------------------------------------------------------------------#
#                           Build directory check                                    #
#------------------------------------------------------------------------------------#
if(${CMAKE_SOURCE_DIR}/src STREQUAL ${CMAKE_BINARY_DIR})
  message(FATAL_ERROR "Cannot be built in the source directory. Use
  out-of-source build instead.")
  message(FATAL_ERROR "  cd /some/work/dir/build")
  message(FATAL_ERROR "  cmake -i /path/to/source")
endif(${CMAKE_SOURCE_DIR}/src STREQUAL ${CMAKE_BINARY_DIR})

set(CMAKE_C_COMPILER_FORCED TRUE)
set(CMAKE_CXX_COMPILER_FORCED TRUE)

#------------------------------------------------------------------------
# Set basic project settings
#------------------------------------------------------------------------
#
# NOTE: must enable CXX as a language in order to use the GNU compiler
#       toolchain
#
project (swb Fortran C CXX)
enable_language (Fortran C CXX)

SET(CPACK_GENERATOR "TGZ")
include(CPack)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(PACKAGE_BUGREPORT "smwesten@usgs.gov")
set(PACKAGE_NAME "swb")
set(PACKAGE_STRING "swb 1.2 BETA")
set(PACKAGE_TARNAME "swb")
set(PACKAGE_VERSION "1.2 BETA")

cmake_minimum_required(VERSION 2.8)

#------------------------------------------------------------------------
# Locate utility programs
#------------------------------------------------------------------------

find_program( Rscript.exe Rscript
    HINTS
    ENV R_HOME
	${PATH_TO_R}
    PATHS
    "c:/Program Files/R"
    "c:/Program Files/R/R-3.0.1/bin"
    "/usr/bin"
)

message("Rscript is defined as: " ${R_SCRIPT})

#------------------------------------------------------------------------
# Restrict CMAKE_BUILD_TYPE to "Release" or "Debug"
#------------------------------------------------------------------------

set_property(CACHE CMAKE_BUILD_TYPE
        PROPERTY STRINGS "Release" "Debug")

set( CMAKE_BUILD_TYPE "Debug" CACHE STRING
       "Compile in DEBUG or RELEASE mode" )

set_property(CACHE OS
        PROPERTY STRINGS "win_x86" "win_x64" "mac_osx" "linux")

#------------------------------------------------------------------------
# Enable or disable compilation TARGETS from the GUI
#------------------------------------------------------------------------

option (TARGET__SWB_EXECUTABLE
      "Compile the main SWB executable?" OFF)

option (TARGET__SWB_LIBRARY
      "Compile SWB as a library?" OFF)

option (TARGET__SWBSTATS
      "Compile the swbstats application?" OFF)

#------------------------------------------------------------------------
# Set PREPROCESSOR DEFINES for conditional compilation
#------------------------------------------------------------------------

option (OPTION__GRAPHICS_SUPPORT
      "Compile the code with graphics (DISLIN) support?" OFF)
if(OPTION__GRAPHICS_SUPPORT)
  set ( PREPROCESSOR_DEFINES ${PREPROCESSOR_DEFINES} "GRAPHICS_SUPPORT")
endif()

option (OPTION__STREAM_INTERACTIONS
      "Compile the code with stream interactions support?" OFF)
if(OPTION__STREAM_INTERACTIONS)
  set ( PREPROCESSOR_DEFINES ${PREPROCESSOR_DEFINES} "STREAM_INTERACTIONS")
  set(STREAM_INTERACTIONS_VARS 1)
endif()

option (OPTION__NETCDF_SUPPORT
      "Compile the code with NETCDF support?" OFF)
if(OPTION__NETCDF_SUPPORT)
  set ( PREPROCESSOR_DEFINES ${PREPROCESSOR_DEFINES} "NETCDF_SUPPORT")
endif()

option (OPTION__STRICT_DATE_CHECKING
      "Compile the code with strict enforcement of dates?" OFF)
if(OPTION__STRICT_DATE_CHECKING)
  set ( PREPROCESSOR_DEFINES ${PREPROCESSOR_DEFINES} "STRICT_DATE_CHECKING")
endif()

option (OPTION__DEBUG_PRINT
      "Compile the code with extra debug print options enabled?" OFF )
if(OPTION__DEBUG_PRINT)
  set ( PREPROCESSOR_DEFINES ${PREPROCESSOR_DEFINES} "DEBUG_PRINT")
endif()


set_property(CACHE CMAKE_BUILD_TYPE
        PROPERTY STRINGS "Release" "Debug")

set(NETCDF_C_LIB ${PROJECT_SOURCE_DIR}/lib/${OS}/${Fortran_COMPILER_NAME}/libnetcdf.a
 CACHE FILEPATH "Location of NetCDF C library")
set(HDF5_LIB ${PROJECT_SOURCE_DIR}/lib/${OS}/${Fortran_COMPILER_NAME}/libhdf5.a
 CACHE FILEPATH "Location of HDF5 library")
set(HDF5_HL_LIB ${PROJECT_SOURCE_DIR}/lib/${OS}/${Fortran_COMPILER_NAME}/libhdf5_hl.a
 CACHE FILEPATH "Location of HDF5_HL library")
set(CURL_LIB ${PROJECT_SOURCE_DIR}/lib/${OS}/${Fortran_COMPILER_NAME}/libcurl.a
 CACHE FILEPATH "Location of cURL library")
set(SZLIB_LIB ${PROJECT_SOURCE_DIR}/lib/${OS}/${Fortran_COMPILER_NAME}/libsz.a
 CACHE FILEPATH "Location of szlib library")
set(ZLIB_LIB ${PROJECT_SOURCE_DIR}/lib/${OS}/${Fortran_COMPILER_NAME}/libzlib.a
 CACHE FILEPATH "Location of zlib library")

set(WS2_32_LIB ${COMPILER_DIR}/${COMPILER_TRIPLET}/lib/libws2_32.a
 CACHE FILEPATH "Location of Winsock for Windows library" )


set(DISLIN_FORTRAN_LIB ${PROJECT_SOURCE_DIR}/lib/${OS}/${Fortran_COMPILER_NAME}/dismg.a )
set(MODULE_DIR ${INCLUDE_DIR} ${PROJECT_SOURCE_DIR}/include/${OS}/${Fortran_COMPILER_NAME} )
set(USER32_LIB ${COMPILER_DIR}/${COMPILER_TRIPLET}/lib/libuser32.a)
set(GDI32_LIB ${COMPILER_DIR}/${COMPILER_TRIPLET}/lib/libgdi32.a)
set(OPENGL32_LIB ${COMPILER_DIR}/${COMPILER_TRIPLET}/lib/libopengl32.a)
set(GCC_LIB ${COMPILER_DIR}/lib/gcc/${COMPILER_TRIPLET}/${COMPILER_VERSION}/libgcc.a)

set(GFORTRAN_LIB ${COMPILER_DIR}/lib/libgfortran.a)
set(EXTRA_LIBS ${EXTRA_LIBS} ${GCC_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${GFORTRAN_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${HDF5_HL_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${HDF5_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${CURL_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${SZLIB_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${ZLIB_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${NETCDF_C_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${DISLIN_FORTRAN_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${USER32_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${GDI32_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${WS2_32_LIB} )
set(EXTRA_LIBS ${EXTRA_LIBS} ${OPENGL32_LIB} )



include_directories( ${MODULE_DIR} ${EXTRA_INCLUDES} "${PROJECT_SOURCE_DIR}/src/proj4")

add_custom_target(copy ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/src/swb.exe ${CMAKE_INSTALL_PREFIX}/swb.exe
 COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/src/swbstats.exe ${CMAKE_INSTALL_PREFIX}/swbstats.exe
)

add_custom_target(makelib
${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${NETCDF_C_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${HDF5_HL_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${HDF5_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${ZLIB_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${SZLIB_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${WS2_32_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${DISLIN_FORTRAN_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${GDI32_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${USER32_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${OPENGL32_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${GLU32_LIB}
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv ${CURL_LIB}
COMMAND ${CMAKE_COMMAND} -E copy  ${PROJECT_SOURCE_DIR}/build/win32/src/libswblib.a ${PROJECT_SOURCE_DIR}/build/temp/libswblib.a
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -xv libswblib.a
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -rc libswb.a *.o
COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_SOURCE_DIR}/build/temp ar -q libswb.a *.obj
COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/build/temp/libswb.a ${PROJECT_SOURCE_DIR}/build/win/src/libswb.a
VERBATIM
)

#set ( CMAKE_Fortran_FLAGS_DEBUG ${Fortran_FLAGS_DEBUG})
#set ( CMAKE_Fortran_FLAGS_RELEASE ${Fortran_FLAGS_RELEASE})

#if( CMAKE_BUILD_TYPE STREQUAL "Debug")
##  add_definitions(${Fortran_FLAGS_DEBUG})
#else()
#  set(CMAKE_BUILD_TYPE "Release")
##  add_definitions(${Fortran_FLAGS_RELEASE})
#endif()

include_directories(${INCLUDE_DIR} ${INCLUDE_DISLIN})
link_libraries( ${EXTRA_LIBS} )

get_filename_component(COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

message("--------------------------------------------------------------------")
message("   Summary of CMAKE environment variables")
message("--------------------------------------------------------------------")
message("BUILD TYPE: " ${CMAKE_BUILD_TYPE})
message( " ")
message("CMAKE_HOST_WIN32: " ${CMAKE_HOST_WIN32})
message("CMAKE_HOST_APPLE: " ${CMAKE_HOST_APPLE})
message("CMAKE_Fortran_COMPILER full path: " ${CMAKE_Fortran_COMPILER})
message("Fortran compiler: " ${Fortran_COMPILER_NAME})
message("CMAKE Fortran flags (Debug):      " ${CMAKE_Fortran_FLAGS_DEBUG})
message("CMAKE Fortran flags (Profile):      " ${CMAKE_Fortran_FLAGS_PROFILE})
message("CMAKE Fortran flags (Release):      " ${CMAKE_Fortran_FLAGS_RELEASE})
message( " ")
MESSAGE("Install to directory: " ${CMAKE_INSTALL_PREFIX})
message("NetCDF C library: " ${NETCDF_C_LIB})
message("Module include directory: " ${MODULE_DIR})
message("DISLIN library: " ${DISLIN_FORTRAN_LIB})
message("CMAKE_BINARY_DIR: " ${CMAKE_BINARY_DIR})
message("CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR})
message("PROJECT_SOURCE_DIR: " ${PROJECT_SOURCE_DIR})
message( " ")
message("--------------------------------------------------------------------")

enable_testing()
add_subdirectory(src)
add_subdirectory(tests/general)
add_subdirectory(tests/irrigation)
