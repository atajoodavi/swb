# CMake project for swb

cmake_minimum_required(VERSION 2.6)
set(CMAKE_INSTALL_PREFIX bin)

set( FORTRAN_PREPROCESS_FLAG "-x f95-cpp-input" CACHE STRING
    "Flags to force the Fortran compiler to preprocess the source files.")



#project(swb Fortran)


#set(PACKAGE_BUGREPORT "smwesten@usgs.gov")
#set(PACKAGE_NAME "swb")
#set(PACKAGE_STRING "swb 1.0")
#set(PACKAGE_TARNAME "swb")
#set(PACKAGE_VERSION "1.0")

######################################################################
# DEFINE COMPILER and PLATFORM-SPECIFIC OPTIONS for creating MAKEFILES

get_filename_component (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

add_definitions(-DGRAPHICS_SUPPORT -DSTREAM_INTERACTIONS -DNETCDF_SUPPORT)

if (Fortran_COMPILER_NAME MATCHES "gfortran[.a-z]*")
  # gfortran
  set (CMAKE_Fortran_FLAGS_RELEASE "-O3 -x f95-cpp-input")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-O0 -x f95-cpp-input -g -gprof -Wall")
  set(CMAKE_FIND_LIBRARY_PREFIXES lib)
  set(CMAKE_FIND_LIBRARY_SUFFIXES ".a; .so")
  find_program(CMAKE_MAKE_PROGRAM make make.exe
    DOC "Find a suitable make program for building under Windows/MinGW"
    HINTS
    C:/MinGW/bin
    D:/MinGW/bin)
    message("CMAKE_MAKE_PROGRAM: " ${CMAKE_MAKE_PROGRAM})

  find_program(CMAKE_SH sh sh.exe
    DOC "Find a suitable shell for building under Windows/MinGW"
    HINTS
    C:/MSYS/1.0/bin
    D:/MSYS/1.0/bin)
    message("CMAKE_SH: " ${CMAKE_SH})

  find_path(INCLUDE_DIR netcdf.mod NETCDF.mod
    DOC "Include directory (must contain netcdf.mod)"
    HINTS
    ${CMAKE_CURRENT_SOURCE_DIR}/include/win32/gfortran_mingw
    PATH_SUFFIXES
    include/win32/gfortran_mingw)
    message("Using include directory: " ${INCLUDE_DIR})

  find_library(NETCDF_FORTRAN_LIB
    NAMES libnetcdf.a netcdf NETCDF
    DOC "NetCDF Fortran library"
    HINTS
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/win32/gfortran_mingw
    PATH_SUFFIXES
    lib/win32/gfortran_mingw)

  find_library(DISLIN_FORTRAN_LIB
    NAMES disgf.a
    DOC "DISLIN Fortran library"
    HINTS
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/win32/gfortran_mingw
    PATH_SUFFIXES
    lib/win32/gfortran_mingw)

  find_library(GCC_LIB
    NAMES libgcc.a gcc
    DOC "GCC library"
    HINTS
    c:/MinGW/lib/gcc/i586-pc-mingw32/4.6.0
    PATH_SUFFIXES
    MinGW/lib/gcc/i586-pc-mingw32/4.6.0)

  find_library(GFORTRAN_LIB
    NAMES gfortran libgfortran.a
    DOC "GFORTRAN library"
    HINTS
    c:/MinGW/lib
    PATH_SUFFIXES
    MinGW/lib)

  find_library(USER32_LIB
    NAMES user32 libuser32.a
    DOC "MinGW USER32 library"
    HINTS
    c:/MinGW/lib
    PATH_SUFFIXES
    MinGW/lib)

  find_library(GDI32_LIB
    NAMES gdi32 libgdi32.a
    DOC "MinGW USER32 library"
    HINTS
    c:/MinGW/lib
    PATH_SUFFIXES
    MinGW/lib)

  set(EXTRA_LIBS ${EXTRA_LIBS} ${NETCDF_FORTRAN_LIB} )
  set(EXTRA_LIBS ${EXTRA_LIBS} ${DISLIN_FORTRAN_LIB} )
  set(EXTRA_LIBS ${EXTRA_LIBS} ${GCC_LIB} )
  set(EXTRA_LIBS ${EXTRA_LIBS} ${GFORTRAN_LIB} )
  set(EXTRA_LIBS ${EXTRA_LIBS} ${USER32_LIB} )
  set(EXTRA_LIBS ${EXTRA_LIBS} ${GDI32_LIB} )

#set(EXTRA_LIBS c:/MinGW/lib/gcc/i586-pc-mingw32/4.6.0/libgcc.a
#               c:/MinGW/lib/libgfortran.a
#               c:/MinGW/lib/libuser32.a
#               c:/MinGW/lib/libgdi32.a)


elseif (Fortran_COMPILER_NAME MATCHES "ifort[.a-z]*")
  # ifort (untested)
  set (CMAKE_Fortran_FLAGS_RELEASE "-f77rtl -O3")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-f77rtl -O0 -g")
elseif (Fortran_COMPILER_NAME MATCHES "g95[.a-z]*")
  # g95
  set (CMAKE_Fortran_FLAGS_RELEASE "-O3")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-O0 -g -Wall")
else (Fortran_COMPILER_NAME MATCHES "gfortran[.a-z]*")
  message ("CMAKE_Fortran_COMPILER full path: " ${CMAKE_Fortran_COMPILER})
  message ("Fortran compiler: " ${Fortran_COMPILER_NAME})
  message ("No optimized Fortran compiler flags are known, we just try -O2...")
  set (CMAKE_Fortran_FLAGS_RELEASE "-O2")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-O0 -g -gprof -Wall")
endif (Fortran_COMPILER_NAME MATCHES "gfortran[.a-z]*")

######################################################################

message("Using NetCDF library: " ${NETCDF_FORTRAN_LIB})
message("Using DISLIN library: " ${DISLIN_FORTRAN_LIB})

message("CMAKE_BINARY_DIR: " ${CMAKE_BINARY_DIR})
message("CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR})
message("PROJECT_SOURCE_DIR: " ${PROJECT_SOURCE_DIR})

######################################################################

project(swb Fortran)

set(PACKAGE_BUGREPORT "smwesten@usgs.gov")
set(PACKAGE_NAME "swb")
set(PACKAGE_STRING "swb 1.0")
set(PACKAGE_TARNAME "swb")
set(PACKAGE_VERSION "1.0")

######################################################################

include_directories(${INCLUDE_DIR})
set(EXTRA_LIBS ${EXTRA_LIBS} ${NETCDF_LIBS} ${DISLIN_LIBS})
link_libraries( ${EXTRA_LIBS} )

get_filename_component(COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

# MW 2009-01-20: Below we add -I/usr/include manually because gfortran
# does not search this by default [1], but cmake strips it from paths
# given by include_directories(), assuming that the compiler will
# search it anyway (as gcc does). I reported this as a cmake bug [2].
# [1] http://gcc.gnu.org/bugzilla/show_bug.cgi?id=35707
# [2] http://www.cmake.org/Bug/view.php?id=8408
#
# MW 2009-06-15: The issue is rather tricky from the gfortran side
# (module files should not go in include directories at all). On the
# cmake side the issue has been resolved by removing include directory
# suppression altogether for Fortran [3]. This change apparently went
# into cmake 2.6.4, but we'll keep the explicit include hack below for
# a while until everyone updates.
# [3] http://www.cmake.org/Bug/view.php?id=8598

#add_definitions(-g f95-cpp-input -fimplicit-none -W -Wall -Wconversion -Wunderflow -Wimplicit-interface -Wno-unused -fbounds-check)

######################################################################

add_subdirectory(src)
